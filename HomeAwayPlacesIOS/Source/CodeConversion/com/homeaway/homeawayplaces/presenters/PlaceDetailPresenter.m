//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/homeaway/homeawayplaces/presenters/PlaceDetailPresenter.java
//
//

#import "PlaceListItemDataBinder.h"
#import "Place.h"
#import "PlaceModifiedEvent.h"
#import "PlacesApi.h"
#import "PlacesProvider.h"
#import "PlaceDetailPresenter.h"
#import "StaticMapDTO.h"
#import "StaticMapMarkerDTO.h"
#import "StaticMapRequestDTO.h"
#import "StaticMapGateway.h"
#import "IPlaceDetailView.h"
#import "IPlaceListItemView.h"

@implementation PlaceDetailPresenter

@synthesize mPlace = mPlace_;
@synthesize mPoi = mPoi_;

- (id)initWithIPlaceDetailView:(id<IPlaceDetailView>)view {
  return [super initWithId:view];
}

- (void)loadWithWithPlace:(Place *)place
       withVanilaLocation:(VanilaLocation *)center {
  mPlace_ = place;
  mPlace_.showWebsite = YES;
  mPoi_ = center;
}

- (void)onCreate {
  [super onCreate];
  [self subscribeToEvents];
}

- (void)onDependenciesResolved {
  [super onDependenciesResolved];
  [((id<IPlaceDetailView>) ((id<IPlaceDetailView>) [self getView])) setTitleWithWithNSString:mPlace_.name];
  [self loadModel];
}

- (void)loadModel {
  [self loadStaticMap];
  [self bindModel];
}

- (void)loadStaticMap {
  MobilePlatformInfo *mobilePlatformInfo = ((MobilePlatformInfo *) [mMobilePlatformFactory_ getPlatformInfo]);
  int width = mobilePlatformInfo.deviceWidthInPx;
  int height = mobilePlatformInfo.deviceHeightInPx >> 1;
  [((id<IPlaceDetailView>) ((id<IPlaceDetailView>) [self getView])) setStaticMapHeightWithInt:height];
  [((id<IPlaceDetailView>) ((id<IPlaceDetailView>) [self getView])) showProgressWithBOOL:YES];
  [self fireStaticMapRequestWithInt:width withInt:height];
}

- (void)fireStaticMapRequestWithInt:(int)width
                            withInt:(int)height {
  StaticMapRequestDTO *dto = [[StaticMapRequestDTO alloc] init];
  dto.entityName = [Place CLASS_NAME];
  dto.width = width;
  dto.height = height;
  dto.zoomLevel = [self resolveZoomLevelWithInt:mPlace_.distanceToInterest];
  NSString *zerothCharCenter = [NSString stringWithFormat:@"%c", [mStringUtils_ getCharAtWithNSString:mPoi_.label withInt:0]];
  StaticMapMarkerDTO *centerMarker = [self newStaticMapMarkerWithNSString:@"blue" withDouble:mPoi_.latitude withDouble:mPoi_.longitude withNSString:zerothCharCenter];
  NSString *zerothCharPlace = [NSString stringWithFormat:@"%c", [mStringUtils_ getCharAtWithNSString:mPlace_.name withInt:0]];
  StaticMapMarkerDTO *placeMarker = [self newStaticMapMarkerWithNSString:@"green" withDouble:mPlace_.latLng.latitude withDouble:mPlace_.latLng.longitude withNSString:zerothCharPlace];
  dto.markerList = ((id<IGenericList>) [mMobilePlatformFactory_ newList]);
  [dto.markerList addWithId:centerMarker];
  [dto.markerList addWithId:placeMarker];
  id<ILatLngBounds> bounds = [((id<ILocationApi>) [mMobilePlatformFactory_ getLocationApi]) newLatLngBounds];
  [bounds includeWithVanilaLocation:mPoi_];
  [bounds includeWithVanilaLocation:mPlace_.latLng];
  [bounds build];
  @try {
    VanilaLocation *center = [bounds getCenter];
    dto.centerLatitude = center.latitude;
    dto.centerLongitude = center.longitude;
  }
  @catch (VanilaException *e) {
    NSLog(@"%@", [NSThread callStackSymbols]);
  }
  StaticMapGateway *gateway = ((StaticMapGateway *) [mSyncAdapter_ getSyncGatewayWithNSString:[StaticMapGateway CLASS_NAME]]);
  [gateway fireLoadStaticMapRequestWithStaticMapRequestDTO:dto];
}

- (int)resolveZoomLevelWithInt:(int)distanceToInterest {
  int zoomLevel = 12;
  if (distanceToInterest < 1000) {
    zoomLevel = 16;
  }
  else if (distanceToInterest <= 2000) {
    zoomLevel = 15;
  }
  else if (distanceToInterest <= 3500) {
    zoomLevel = 14;
  }
  else if (distanceToInterest <= 7000) {
    zoomLevel = 13;
  }
  return zoomLevel;
}

- (StaticMapMarkerDTO *)newStaticMapMarkerWithNSString:(NSString *)color
                                                                     withDouble:(double)lat
                                                                     withDouble:(double)lng
                                                                   withNSString:(NSString *)name  {
  StaticMapMarkerDTO *staticMarker = [[StaticMapMarkerDTO alloc] init];
  staticMarker.color = color;
  staticMarker.latitude = lat;
  staticMarker.longitude = lng;
  staticMarker.label = name;
  return staticMarker;
}

- (void)bindModel {
  PlaceListItemDataBinder *binder = (PlaceListItemDataBinder *) [((id<IPlaceListItemView>) [((id<IPlaceDetailView>) ((id<IPlaceDetailView>) [self getView])) getPlaceListItemView]) getDataBinder];
  [binder onBindWithObjects:mPlace_, nil];
}

- (void)onPlaceItemUrlClickWithPlace:(Place *)place {
  [((id<IPlaceDetailView>) ((id<IPlaceDetailView>) [self getView])) showBrowserViewWithNSString:place.websiteUrl];
}

- (void)onPlaceItemFavIconClickWithPlace:(Place *)place {
  place.isFavorite = !place.isFavorite;
  [ComJvanilaMobileUtilBinderUtil refreshItemViewsWithDataObject:place];
  [self syncChangeToDatabaseWithPlace:place];
  [mEventBus_ publishWithIEvent:[[PlaceModifiedEvent alloc] initWithPlace:place]];
}

- (void)syncChangeToDatabaseWithPlace:(Place *)place {
  PlacesProvider *provider = [PlacesApi provider];
  if (place.isFavorite) {
    [provider updateAsyncWithPlace:place];
  }
  else {
    [provider deleteAsyncWithPlace:place];
  }
}

- (void)onStaticMapResultSuccessEventWithStaticMapDTO:(StaticMapDTO *)staticMap {
  [((id<IPlaceDetailView>) ((id<IPlaceDetailView>) [self getView])) setStaticMapWithNSData:staticMap.mapRawData];
  [((id<IPlaceDetailView>) ((id<IPlaceDetailView>) [self getView])) showProgressWithBOOL:NO];
}

- (void)subscribeToEvents {
  [mEventBus_ subscribeWithNSString:[NetResponseProcessingCompletedEvent CLASS_NAME] withIEventSubscriber:self];
  [mEventBus_ subscribeWithNSString:[FailureResponseDTO CLASS_NAME] withIEventSubscriber:self];
}

- (void)onEventWithIEvent:(id<IEvent>)event {
  [super onEventWithIEvent:event];
  if ([event isInstanceOfWithClass:[NetResponseProcessingCompletedEvent class]]) {
    NetResponseProcessingCompletedEvent *nrpce = (NetResponseProcessingCompletedEvent *) event;
    if ([mStringUtils_ areXAndYEqualWithNSString:nrpce.mRequestType withNSString:[Place CLASS_NAME]]) {
      [self onStaticMapResultSuccessEventWithStaticMapDTO:(StaticMapDTO *) nrpce.mProcessedResultDTO];
    }
  }
}

- (void)unsubscribeToEvents {
  [mEventBus_ unsubscribeWithNSString:[NetResponseProcessingCompletedEvent CLASS_NAME] withIEventSubscriber:self];
  [mEventBus_ unsubscribeWithNSString:[FailureResponseDTO CLASS_NAME] withIEventSubscriber:self];
}

- (void)onBackPressed {
  if (((id<IPlaceDetailView>) [self getView]) == nil) {
    return;
  }
  [self unsubscribeToEvents];
  [((id<IPlaceDetailView>) ((id<IPlaceDetailView>) [self getView])) showCallerView];
  [super onBackPressed];
}

- (void)onDestroy {
  [self unsubscribeToEvents];
  mPlace_ = nil;
  mPoi_ = nil;
  [super onDestroy];
}

- (void)copyAllPropertiesTo:(id)copy {
  
  PlaceDetailPresenter *typedCopy = (PlaceDetailPresenter *) copy;
  typedCopy.mPlace = mPlace_;
  typedCopy.mPoi = mPoi_;
}

@end
