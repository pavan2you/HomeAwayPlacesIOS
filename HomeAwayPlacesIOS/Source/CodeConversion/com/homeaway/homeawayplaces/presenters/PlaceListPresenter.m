//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/homeaway/homeawayplaces/presenters/PlaceListPresenter.java
//
//

#import "Place.h"
#import "PlaceModifiedEvent.h"
#import "PlaceSearchResultEvent.h"
#import "PlacesApi.h"
#import "PlacesContext.h"
#import "PlacesProvider.h"
#import "Strings.h"
#import "PlaceListPresenter.h"
#import "IPlaceListView.h"

@implementation PlaceListPresenter

@synthesize mCurrentPointOfInterest = mCurrentPointOfInterest_;
@synthesize mFetchLimit = mFetchLimit_;
@synthesize mSearchedPlaceList = mSearchedPlaceList_;
@synthesize mFavoritePlaceList = mFavoritePlaceList_;
@synthesize mCurrentPlaceList = mCurrentPlaceList_;
@synthesize mTitle = mTitle_;
@synthesize mSearchFieldHint = mSearchFieldHint_;
@synthesize mSearchPlacesTip = mSearchPlacesTip_;
@synthesize mNoFavPlacesMessage = mNoFavPlacesMessage_;
@synthesize mNoResultsMessage = mNoResultsMessage_;
@synthesize mNoInternetMessage = mNoInternetMessage_;
@synthesize mUnrecoverableMessage = mUnrecoverableMessage_;
@synthesize mCurrentNoDataMessage = mCurrentNoDataMessage_;
@synthesize mReadFavoritesToken = mReadFavoritesToken_;
@synthesize mIsSearchInProgress = mIsSearchInProgress_;
@synthesize mCurrentSearchPhrase = mCurrentSearchPhrase_;
@synthesize mRetriableSearchPhrase = mRetriableSearchPhrase_;
@synthesize mShowFavorites = mShowFavorites_;
@synthesize mLoadedSearchPhrase = mLoadedSearchPhrase_;

- (id)initWithIPlaceListView:(id<IPlaceListView>)view {
  return [super initWithId:view];
}

- (void)onCreate {
  [super onCreate];
  [self loadPlaceContext];
  mSearchFieldHint_ = [self getStringWithNSString:[Strings place_list_search_nearby]];
  mSearchPlacesTip_ = [self getStringWithNSString:[Strings place_list_search_places]];
  mNoFavPlacesMessage_ = [self getStringWithNSString:[Strings place_list_no_favs]];
  mNoResultsMessage_ = [self getStringWithNSString:[Strings place_list_no_results]];
  mNoInternetMessage_ = [self getStringWithNSString:[Strings place_list_no_internet]];
  mUnrecoverableMessage_ = [self getStringWithNSString:[Strings place_list_unrecoverable_nw_error]];
  mCurrentNoDataMessage_ = mSearchPlacesTip_;
  mShowFavorites_ = YES;
  [self subscribeToEvents];
}

- (void)loadWithWithNSString:(NSString *)searchPhrase {
  mLoadedSearchPhrase_ = searchPhrase;
}

- (void)onDependenciesResolved {
  [super onDependenciesResolved];
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) setTitleWithWithNSString:mTitle_];
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showProgressWithBOOL:mIsSearchInProgress_];
  [self loadModel];
}

- (void)loadPlaceContext {
  PlacesContext *context = [[PlacesApi provider] getContext];
  mCurrentPointOfInterest_ = context.poi;
  mFetchLimit_ = context.fetchLimit;
  NSString *poi = [mStringUtils_ replaceAllOccuarencesOfYWithZInXWithNSString:@"+" withNSString:@" " withNSString:mCurrentPointOfInterest_.label];
  mTitle_ = [self getStringWithNSString:[Strings place_list_search_in] withNSArray:[NSArray arrayWithObjects:poi, nil], nil];
}

- (void)loadModel {
  [self showListOrInfoWithIGenericList:mCurrentPlaceList_];
  [self loadFavourites];
  if (mLoadedSearchPhrase_ != nil) {
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) setSearchFieldTextWithNSString:mLoadedSearchPhrase_];
  }
}

- (void)loadFavourites {
  mReadFavoritesToken_ = [[PlacesApi provider] fetchFavoritesAsync];
}

- (void)showListOrInfoWithIGenericList:(id<IGenericList>)list {
  if (list == nil || [list size] == 0) {
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) setSearchFieldHintWithNSString:mSearchFieldHint_];
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) hideListView];
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) setAndShowNoDataLabelWithNSString:mCurrentNoDataMessage_];
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) hideFabIcon];
  }
  else {
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) hideNoDataLabel];
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) setAndShowDataModelWithIGenericList:list];
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showFabIcon];
  }
}

- (void)onChangePoiMenuItemClick {
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showInfoMessageWithNSString:@"TODO : It will let to change Point Of Interest"];
}

- (void)onUseMyLocationAsPoiMenuItemClick {
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showInfoMessageWithNSString:@"TODO : Allows user location as Point of Interest"];
}

- (void)onMyFavPlacesMenuItemClick {
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) hideVirtualKeyboard];
  if (mFavoritePlaceList_ == nil || [mFavoritePlaceList_ size] == 0) {
    mShowFavorites_ = YES;
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showProgressWithBOOL:YES];
    [self loadFavourites];
  }
  else {
    [self showFavoritesList];
  }
}

- (void)showFavoritesList {
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) setSearchFieldTextWithNSString:@""];
  mCurrentPlaceList_ = mFavoritePlaceList_;
  mCurrentNoDataMessage_ = mNoFavPlacesMessage_;
  [self showListOrInfoWithIGenericList:mCurrentPlaceList_];
}

- (void)onSearchPlacesWithNSString:(NSString *)searchPhrase {
  mCurrentSearchPhrase_ = searchPhrase;
  mRetriableSearchPhrase_ = nil;
  if ([mStringUtils_ isNullOrEmptyWithNSString:searchPhrase]) {
    mIsSearchInProgress_ = NO;
    mCurrentPlaceList_ = mSearchedPlaceList_ = nil;
    mCurrentNoDataMessage_ = mSearchPlacesTip_;
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showProgressWithBOOL:NO];
    [self showListOrInfoWithIGenericList:nil];
  }
  else {
    mIsSearchInProgress_ = YES;
    PlacesProvider_SearchOptions *options = [[PlacesProvider_SearchOptions alloc] init];
    options.nearbyFreeFormText = mCurrentPointOfInterest_.label;
    options.limit = mFetchLimit_;
    @try {
      [[PlacesApi provider] searchWithNSString:searchPhrase withPlacesProvider_SearchOptions:options];
    }
    @catch (VanilaException *e) {
      NSLog(@"%@", [NSThread callStackSymbols]);
    }
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showProgressWithBOOL:YES];
  }
}

- (void)onCancelSearchIconClick {
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) setSearchFieldTextWithNSString:@""];
}

- (void)onPlaceItemClickWithPlace:(Place *)item {
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showPlaceDetailViewWithPlace:item withVanilaLocation:mCurrentPointOfInterest_];
}

- (void)onPlaceItemFavIconClickWithPlace:(Place *)place {
  place.isFavorite = !place.isFavorite;
  if (mFavoritePlaceList_ == nil) {
    mFavoritePlaceList_ = ((id<IGenericList>) [mMobilePlatformFactory_ newList]);
  }
  if (place.isFavorite) {
    [mFavoritePlaceList_ addWithId:place];
  }
  else {
    [mFavoritePlaceList_ removeWithId:place];
  }
  [ComJvanilaMobileUtilBinderUtil refreshItemViewsWithDataObject:place];
  [self syncChangeToDatabaseWithPlace:place];
  [self switchToSearchResultsIfFavoritesAreEmpty];
}

- (void)switchToSearchResultsIfFavoritesAreEmpty {
  if ([mFavoritePlaceList_ size] == 0 && mCurrentPlaceList_ == mFavoritePlaceList_) {
    mCurrentNoDataMessage_ = mSearchPlacesTip_;
    mCurrentPlaceList_ = mSearchedPlaceList_;
    [self showListOrInfoWithIGenericList:nil];
  }
}

- (void)onMapIconClick {
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showMapViewWithIGenericList:mCurrentPlaceList_ withVanilaLocation:mCurrentPointOfInterest_];
}

- (void)syncChangeToDatabaseWithPlace:(Place *)place {
  PlacesProvider *provider = [PlacesApi provider];
  if (place.isFavorite) {
    [provider updateAsyncWithPlace:place];
  }
  else {
    [provider deleteAsyncWithPlace:place];
  }
}

- (BOOL)isReadFavoritesTokenWithAsyncToken:(AsyncToken *)asyncToken {
  return mReadFavoritesToken_ != nil && [mStringUtils_ areXAndYEqualWithNSString:asyncToken.tokenUuid withNSString:mReadFavoritesToken_.tokenUuid];
}

- (void)onFetchingFavouritePlacesCompleteWithIGenericList:(id<IGenericList>)result {
  mFavoritePlaceList_ = result;
  mReadFavoritesToken_ = nil;
  if (mShowFavorites_) {
    mShowFavorites_ = NO;
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showProgressWithBOOL:NO];
    [self showFavoritesList];
  }
}

- (void)onPlaceSearchResultEventWithPlaceSearchResultEvent:(PlaceSearchResultEvent *)event {
  mIsSearchInProgress_ = NO;
  if (event.failureResponse != nil) {
    [self onPlaceSearchFailureWithPlaceSearchResultEvent:event];
  }
  else {
    [self onPlaceSearchSuccessWithPlaceSearchResultEvent:event];
  }
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showProgressWithBOOL:NO];
}

- (void)onPlaceSearchSuccessWithPlaceSearchResultEvent:(PlaceSearchResultEvent *)event {
  mCurrentSearchPhrase_ = nil;
  mCurrentPlaceList_ = mSearchedPlaceList_ = event.placeList;
  mCurrentNoDataMessage_ = mNoResultsMessage_;
  [self showListOrInfoWithIGenericList:mCurrentPlaceList_];
}

- (void)onPlaceSearchFailureWithPlaceSearchResultEvent:(PlaceSearchResultEvent *)event {
  FailureResponseDTO *failureEvent = event.failureResponse;
  NSString *messageToPrompt;
  if (failureEvent.type == ERROR_TYPE_NO_NETWORK || failureEvent.type == ERROR_TYPE_API_EXCEPTION) {
    NSString *failedQuery = event.query;
    if ([mStringUtils_ areXAndYEqualWithNSString:failedQuery withNSString:mCurrentSearchPhrase_]) {
      mRetriableSearchPhrase_ = mCurrentSearchPhrase_;
    }
    messageToPrompt = mNoInternetMessage_;
  }
  else {
    mCurrentSearchPhrase_ = nil;
    messageToPrompt = mUnrecoverableMessage_;
  }
  if (mSearchedPlaceList_ == nil) {
    mCurrentNoDataMessage_ = messageToPrompt;
    [self showListOrInfoWithIGenericList:nil];
  }
  else {
    [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showInfoMessageWithNSString:messageToPrompt];
  }
}

- (void)onAsyncTokenJobCompleteWithAsyncToken:(AsyncToken *)asyncToken {
  if ([self isReadFavoritesTokenWithAsyncToken:asyncToken]) {
    [self onFetchingFavouritePlacesCompleteWithIGenericList:mReadFavoritesToken_.result];
  }
}

- (void)cancelIfReadFavoritesJobIsWaiting {
  if (mReadFavoritesToken_ != nil && mReadFavoritesToken_.hook != nil) {
    id<IAsyncJob> job = ((AsyncToken *) mReadFavoritesToken_.hook).job;
    [job cancel];
    mReadFavoritesToken_ = nil;
  }
}

- (void)onPlaceModifiedEventWithPlaceModifiedEvent:(PlaceModifiedEvent *)event {
  Place *modifiedPlace = event.place;
  modifiedPlace.showWebsite = NO;
  if (mSearchedPlaceList_ != nil && [mSearchedPlaceList_ containsWithId:modifiedPlace]) {
    [self updateItemInListWithPlace:modifiedPlace withIGenericList:mSearchedPlaceList_ withBOOL:mCurrentPlaceList_ == mSearchedPlaceList_];
  }
  if (mFavoritePlaceList_ != nil) {
    if (modifiedPlace.isFavorite) {
      [mFavoritePlaceList_ removeWithId:modifiedPlace];
    }
    else {
      [mFavoritePlaceList_ addWithId:modifiedPlace];
    }
    [self switchToSearchResultsIfFavoritesAreEmpty];
  }
}

- (void)updateItemInListWithPlace:(Place *)modifiedPlace
                 withIGenericList:(id<IGenericList>)list
                                                  withBOOL:(BOOL)refreshList {
  int indexOfPlace = [list indexOfWithId:modifiedPlace];
  Place *existingPlace = ((Place *) [list getWithInt:indexOfPlace]);
  [list replaceWithId:modifiedPlace withInt:indexOfPlace];
  if (refreshList) {
    [ComJvanilaMobileUtilBinderUtil swapTagsInItemViewsWithDataObject:existingPlace withDataObject:modifiedPlace];
    [ComJvanilaMobileUtilBinderUtil refreshItemViewsWithDataObject:modifiedPlace];
  }
}

- (void)onNetworkAvailabilityEventWithNetworkAvailabilityEvent:(NetworkAvailabilityEvent *)event {
  if (event.mReachableState == NetworkAvailabilityEvent_REACHABLE) {
    if (mRetriableSearchPhrase_ != nil) {
      [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showInfoMessageWithNSString:[self getStringWithNSString:[Strings place_list_search_retry] withNSArray:[NSArray arrayWithObjects:mSearchPlacesTip_, nil], nil]];
      [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) setSearchFieldTextWithNSString:mRetriableSearchPhrase_];
    }
    else {
      mCurrentNoDataMessage_ = mSearchPlacesTip_;
      if (mCurrentPlaceList_ == nil || [mCurrentPlaceList_ size] == 0) {
        [self showListOrInfoWithIGenericList:nil];
      }
    }
  }
  else {
    mCurrentNoDataMessage_ = mNoInternetMessage_;
    if (mCurrentPlaceList_ == nil || [mCurrentPlaceList_ size] == 0) {
      [self showListOrInfoWithIGenericList:nil];
    }
  }
}

- (void)subscribeToEvents {
  [mEventBus_ subscribeWithNSString:[PlaceSearchResultEvent CLASS_NAME] withIEventSubscriber:self];
  [mEventBus_ subscribeWithNSString:[AsyncToken CLASS_NAME] withIEventSubscriber:self];
  [mEventBus_ subscribeWithNSString:[PlaceModifiedEvent CLASS_NAME] withIEventSubscriber:self];
  [mEventBus_ subscribeWithNSString:[NetworkAvailabilityEvent CLASS_NAME] withIEventSubscriber:self];
}

- (void)onEventWithIEvent:(id<IEvent>)event {
  [super onEventWithIEvent:event];
  if ([event isInstanceOfWithClass:[PlaceSearchResultEvent class]]) {
    [self onPlaceSearchResultEventWithPlaceSearchResultEvent:(PlaceSearchResultEvent *) event];
  }
  else if ([event isInstanceOfWithClass:[AsyncToken class]]) {
    [self onAsyncTokenJobCompleteWithAsyncToken:(AsyncToken *) event];
  }
  else if ([event isInstanceOfWithClass:[PlaceModifiedEvent class]]) {
    [self onPlaceModifiedEventWithPlaceModifiedEvent:(PlaceModifiedEvent *) event];
  }
  else if ([event isInstanceOfWithClass:[NetworkAvailabilityEvent class]]) {
    [self onNetworkAvailabilityEventWithNetworkAvailabilityEvent:(NetworkAvailabilityEvent *) event];
  }
}

- (void)unsubscribeToEvents {
  [mEventBus_ unsubscribeWithNSString:[PlaceSearchResultEvent CLASS_NAME] withIEventSubscriber:self];
  [mEventBus_ unsubscribeWithNSString:[AsyncToken CLASS_NAME] withIEventSubscriber:self];
  [mEventBus_ unsubscribeWithNSString:[PlaceModifiedEvent CLASS_NAME] withIEventSubscriber:self];
  [mEventBus_ unsubscribeWithNSString:[NetworkAvailabilityEvent CLASS_NAME] withIEventSubscriber:self];
}

- (void)onBackPressed {
  if (((id<IPlaceListView>) [self getView]) == nil) {
    return;
  }
  [self cancelIfReadFavoritesJobIsWaiting];
  [self unsubscribeToEvents];
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) exitApplication];
  [super onBackPressed];
}

- (void)onDestroy {
  [self cancelIfReadFavoritesJobIsWaiting];
  [self unsubscribeToEvents];
  mCurrentPointOfInterest_ = nil;
  mSearchedPlaceList_ = nil;
  mFavoritePlaceList_ = nil;
  mCurrentPlaceList_ = nil;
  mTitle_ = nil;
  mSearchPlacesTip_ = nil;
  mNoFavPlacesMessage_ = nil;
  mNoResultsMessage_ = nil;
  mNoInternetMessage_ = nil;
  mUnrecoverableMessage_ = nil;
  mCurrentNoDataMessage_ = nil;
  [super onDestroy];
}

- (void)onUseFoursquarePlacesMenuItemClick {
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showInfoMessageWithNSString:@"Using Foursquare"];
}

- (void)onUseGooglePlacesMenuItemClick {
  [((id<IPlaceListView>) ((id<IPlaceListView>) [self getView])) showInfoMessageWithNSString:@"Using Google"];
}

- (void)copyAllPropertiesTo:(id)copy {
  
  PlaceListPresenter *typedCopy = (PlaceListPresenter *) copy;
  typedCopy.mCurrentPointOfInterest = mCurrentPointOfInterest_;
  typedCopy.mFetchLimit = mFetchLimit_;
  typedCopy.mSearchedPlaceList = mSearchedPlaceList_;
  typedCopy.mFavoritePlaceList = mFavoritePlaceList_;
  typedCopy.mCurrentPlaceList = mCurrentPlaceList_;
  typedCopy.mTitle = mTitle_;
  typedCopy.mSearchFieldHint = mSearchFieldHint_;
  typedCopy.mSearchPlacesTip = mSearchPlacesTip_;
  typedCopy.mNoFavPlacesMessage = mNoFavPlacesMessage_;
  typedCopy.mNoResultsMessage = mNoResultsMessage_;
  typedCopy.mNoInternetMessage = mNoInternetMessage_;
  typedCopy.mUnrecoverableMessage = mUnrecoverableMessage_;
  typedCopy.mCurrentNoDataMessage = mCurrentNoDataMessage_;
  typedCopy.mReadFavoritesToken = mReadFavoritesToken_;
  typedCopy.mIsSearchInProgress = mIsSearchInProgress_;
  typedCopy.mCurrentSearchPhrase = mCurrentSearchPhrase_;
  typedCopy.mRetriableSearchPhrase = mRetriableSearchPhrase_;
  typedCopy.mShowFavorites = mShowFavorites_;
  typedCopy.mLoadedSearchPhrase = mLoadedSearchPhrase_;
}

@end
