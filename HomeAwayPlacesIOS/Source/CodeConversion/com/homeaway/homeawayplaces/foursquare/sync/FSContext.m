//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/homeaway/homeawayplaces/foursquare/sync/FSContext.java
//
//

#import "PlacesProvider.h"
#import "FSContext.h"
#import "FSRequestDTO.h"

@implementation FSContext

@synthesize mNumberUtils = mNumberUtils_;
@synthesize mStringUtils = mStringUtils_;
@synthesize mClientId = mClientId_;
@synthesize mClientSecret = mClientSecret_;
@synthesize mVersion = mVersion_;

- (id)initWithNSString:(NSString *)clientId
          withNSString:(NSString *)clientSecret
          withNSString:(NSString *)version_ {
  if ((self = [super init])) {
    mClientId_ = clientId;
    mClientSecret_ = clientSecret;
    mVersion_ = version_;
    mNumberUtils_ = [((id<IPlatformFactory>) [PlatformFactoryLocator getPlatformFactory]) getNumberUtils];
    mStringUtils_ = [((id<IPlatformFactory>) [PlatformFactoryLocator getPlatformFactory]) getStringUtils];
    fetchLimit_ = FSContext_DEFAULT_FETCH_LIMIT;
    cacheLimit_ = FSContext_DEFAULT_CACHE_LIMIT;
  }
  return self;
}

- (FSRequestDTO *)buildVenueRequestWithNSString:(NSString *)query
               withPlacesProvider_SearchOptions:(PlacesProvider_SearchOptions *)options {
  FSRequestDTO *request = nil;
  if (![mStringUtils_ isNullOrEmptyWithNSString:options.nearbyFreeFormText]) {
    request = [self buildVenueRequestWithNSString:options.nearbyFreeFormText withNSString:query withInt:options.limit];
  }
  else if (options.nearbyLocation != nil) {
    request = [self buildVenueRequestWithVanilaLocation:options.nearbyLocation withNSString:query withInt:options.limit];
  }
  if (request == nil) {
    @throw [[VanilaException alloc] initWithNSString:@"Insufficient parameters"];
  }
  return request;
}

- (FSRequestDTO *)buildVenueRequestWithVanilaLocation:(VanilaLocation *)nearby
                                                                                           withNSString:(NSString *)query
                                                                                                withInt:(int)limit {
  FSRequestDTO *venueRequest = [[FSRequestDTO alloc] init];
  id<IGenericMap> params = [self newParamsWithClientAndVersion];
  [params putWithId:@"query" withId:query];
  [params putWithId:@"ll" withId:[NSString stringWithFormat:@"%f,%f", nearby.latitude, nearby.longitude]];
  [params putWithId:@"limit" withId:[mNumberUtils_ stringifyIntWithInt:limit]];
  venueRequest.params = params;
  return venueRequest;
}

- (FSRequestDTO *)buildVenueRequestWithNSString:(NSString *)nearby
                                                            withNSString:(NSString *)query
                                                                 withInt:(int)limit {
  FSRequestDTO *venueRequest = [[FSRequestDTO alloc] init];
  id<IGenericMap> params = [self newParamsWithClientAndVersion];
  [params putWithId:@"query" withId:query];
  [params putWithId:@"near" withId:nearby];
  [params putWithId:@"limit" withId:[mNumberUtils_ stringifyIntWithInt:limit]];
  venueRequest.params = params;
  return venueRequest;
}

- (id<IGenericMap>)newParamsWithClientAndVersion  {
  id<IGenericMap> params = ((id<IGenericMap>) [[PlatformFactoryLocator getPlatformFactory] newMap]);
  [params putWithId:@"client_id" withId:mClientId_];
  [params putWithId:@"client_secret" withId:mClientSecret_];
  [params putWithId:@"v" withId:mVersion_];
  return params;
}

- (void)copyAllPropertiesTo:(id)copy {
  
  FSContext *typedCopy = (FSContext *) copy;
  typedCopy.mNumberUtils = mNumberUtils_;
  typedCopy.mStringUtils = mStringUtils_;
  typedCopy.mClientId = mClientId_;
  typedCopy.mClientSecret = mClientSecret_;
  typedCopy.mVersion = mVersion_;
}

@end
