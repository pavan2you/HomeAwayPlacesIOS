//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/homeaway/homeawayplaces/domain/PlacesProvider.java
//
//

#import "Place.h"
#import "PlaceSearchResultEvent.h"
#import "PlacesContext.h"
#import "PlacesProvider.h"

@implementation PlacesProvider

@synthesize mMobilePlatformFactory = mMobilePlatformFactory_;
@synthesize mEventBus = mEventBus_;
@synthesize mCallbackList = mCallbackList_;
@synthesize mRecentSearchResultsMap = mRecentSearchResultsMap_;
@synthesize mOldestSearchPhraseList = mOldestSearchPhraseList_;

- (id)init {
  if ((self = [super init])) {
    mMobilePlatformFactory_ = [MobilePlatformFactoryLocator getMobilePlatformFactory];
    mEventBus_ = [mMobilePlatformFactory_ getEventBus];
    mCallbackList_ = ((id<IGenericList>) [mMobilePlatformFactory_ newList]);
    mOldestSearchPhraseList_ = ((id<IGenericList>) [mMobilePlatformFactory_ newList]);
    mRecentSearchResultsMap_ = ((id<IGenericMap>) [mMobilePlatformFactory_ newMap]);
  }
  return self;
}

- (PlacesContext *)getContext {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addCallbackWithPlacesProvider_Callback:(id<PlacesProvider_Callback>)callback {
  if (![mCallbackList_ containsWithId:callback]) {
    [mCallbackList_ addWithId:callback];
  }
}

- (void)removeCallbackWithPlacesProvider_Callback:(id<PlacesProvider_Callback>)callback {
  [mCallbackList_ removeWithId:callback];
}

- (AsyncToken *)fetchByIdAsyncWithNSString:(NSString *)id_ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AsyncToken *)fetchAllAsync {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AsyncToken *)fetchFavoritesAsync {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AsyncToken *)updateAsyncWithPlace:(Place *)place {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (AsyncToken *)deleteAsyncWithPlace:(Place *)place {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)searchWithNSString:(NSString *)query
withPlacesProvider_SearchOptions:(PlacesProvider_SearchOptions *)options {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)searchCompleteWithNSString:(NSString *)query
withIGenericList:(id<IGenericList>)result
withFailureResponseDTO:(FailureResponseDTO *)failureResponse {
  if (result != nil) {
    PlacesContext *context = [self getContext];
    while ([mOldestSearchPhraseList_ size] >= context.cacheLimit) {
      NSString *oldestSearchPhrase = ((NSString *) [mOldestSearchPhraseList_ getWithInt:0]);
      [mRecentSearchResultsMap_ removeWithId:oldestSearchPhrase];
    }
    if (![mOldestSearchPhraseList_ containsWithId:query]) {
      [mOldestSearchPhraseList_ addWithId:query];
      [mRecentSearchResultsMap_ putWithId:query withId:result];
    }
  }
  {
    for (NSObject* loopObj in mCallbackList_) {
    
      id<PlacesProvider_Callback> callback = ((id<PlacesProvider_Callback>) loopObj);
      [callback onSearchCompleteWithNSString:query withIGenericList:result withFailureResponseDTO:failureResponse];
    }
  }
  PlaceSearchResultEvent *event = [[PlaceSearchResultEvent alloc] initWithNSString:query withIGenericList:result withFailureResponseDTO:failureResponse];
  [mEventBus_ publishWithIEvent:event];
}

- (BOOL)isCacheHavingResultsWithNSString:(NSString *)query {
  return [mRecentSearchResultsMap_ containsKeyWithId:query];
}

- (void)copyAllPropertiesTo:(id)copy {
  
  PlacesProvider *typedCopy = (PlacesProvider *) copy;
  typedCopy.mMobilePlatformFactory = mMobilePlatformFactory_;
  typedCopy.mEventBus = mEventBus_;
  typedCopy.mCallbackList = mCallbackList_;
  typedCopy.mRecentSearchResultsMap = mRecentSearchResultsMap_;
  typedCopy.mOldestSearchPhraseList = mOldestSearchPhraseList_;
}

@end
@implementation PlacesProvider_SearchOptions

@synthesize nearbyLocation = nearbyLocation_;
@synthesize nearbyFreeFormText = nearbyFreeFormText_;
@synthesize radius = radius_;
@synthesize limit = limit_;
@synthesize withInBounds = withInBounds_;

- (void)copyAllPropertiesTo:(id)copy {
  
  PlacesProvider_SearchOptions *typedCopy = (PlacesProvider_SearchOptions *) copy;
  typedCopy.nearbyLocation = nearbyLocation_;
  typedCopy.nearbyFreeFormText = nearbyFreeFormText_;
  typedCopy.radius = radius_;
  typedCopy.limit = limit_;
  typedCopy.withInBounds = withInBounds_;
}

@end
