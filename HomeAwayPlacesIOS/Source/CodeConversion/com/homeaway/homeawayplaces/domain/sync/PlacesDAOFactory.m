//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/homeaway/homeawayplaces/domain/sync/PlacesDAOFactory.java
//
//

#import "PlacesDAOFactory.h"
#import "AssociationDAO.h"
#import "EntityJsonDAO.h"

@implementation PlacesDAOFactory

@synthesize mEntityJsonDAO = mEntityJsonDAO_;
@synthesize mAssociationDAOMap = mAssociationDAOMap_;
@synthesize mLock_PlacesDAOFactory = mLock_PlacesDAOFactory_;

- (id)init {
  if ((self = [super init])) {
    mLock_PlacesDAOFactory_ = [[NSObject alloc] init];
    mAssociationDAOMap_ = ((id<IGenericMap>) [[PlatformFactoryLocator getPlatformFactory] newMap]);
  }
  return self;
}

- (EntityJsonDAO *)getEntityJsonDAO {
  @synchronized (mLock_PlacesDAOFactory_) {
    return [self getEntityJsonDAOInternal];
  }
}

- (EntityJsonDAO *)getEntityJsonDAOInternal {
  if (mEntityJsonDAO_ == nil) {
    mEntityJsonDAO_ = [[EntityJsonDAO alloc] initWithISqliteAccessor:mSqliteAccessor_];
  }
  return mEntityJsonDAO_;
}

- (AssociationDAO *)getAssociationDAOWithNSString:(NSString *)associationName {
  @synchronized (mLock_PlacesDAOFactory_) {
    return [self getAssociationDAOInternalWithNSString:associationName];
  }
}

- (AssociationDAO *)getAssociationDAOInternalWithNSString:(NSString *)lctName {
  AssociationDAO *listColumnDAO = ((AssociationDAO *) [mAssociationDAOMap_ getWithId:lctName]);
  if (listColumnDAO == nil) {
    listColumnDAO = [[AssociationDAO alloc] initWithISqliteAccessor:mSqliteAccessor_ withNSString:lctName];
    [mAssociationDAOMap_ putWithId:lctName withId:listColumnDAO];
  }
  return listColumnDAO;
}

- (void)onSQLiteDatabaseOpenWithISqliteAccessor:(id<ISqliteAccessor>)sqliteAccessor {
  [super onSQLiteDatabaseOpenWithISqliteAccessor:sqliteAccessor];
  @synchronized (mLock_PlacesDAOFactory_) {
    [[self getEntityJsonDAOInternal] setSQLiteAccessorWithISqliteAccessor:sqliteAccessor];
    id<IGenericList> associationDaos = ((id<IGenericList>) [mAssociationDAOMap_ getValues]);
    if (associationDaos != nil) {
      {
        for (NSObject* loopObj in associationDaos) {
        
          AssociationDAO *associationDAO = ((AssociationDAO *) loopObj);
          [associationDAO setSQLiteAccessorWithISqliteAccessor:sqliteAccessor];
        }
      }
    }
  }
}

- (BOOL)isDAOIntegrityOK {
  @synchronized (mLock_PlacesDAOFactory_) {
    BOOL check = [super isDAOIntegrityOK] && [[self getEntityJsonDAOInternal] isSQLiteDatabaseOpen];
    id<IGenericList> associationDaos = ((id<IGenericList>) [mAssociationDAOMap_ getValues]);
    if (associationDaos != nil) {
      BOOL assCheck = YES;
      {
        for (NSObject* loopObj in associationDaos) {
        
          AssociationDAO *associationDAO = ((AssociationDAO *) loopObj);
          assCheck = [associationDAO isSQLiteDatabaseOpen];
          if (!assCheck) {
            break;
          }
        }
      }
      check &= assCheck;
    }
    return check;
  }
}

- (void)nullify {
  [super nullify];
  @synchronized (mLock_PlacesDAOFactory_) {
    mEntityJsonDAO_ = nil;
    [mAssociationDAOMap_ clear];
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  
  PlacesDAOFactory *typedCopy = (PlacesDAOFactory *) copy;
  typedCopy.mEntityJsonDAO = mEntityJsonDAO_;
  typedCopy.mAssociationDAOMap = mAssociationDAOMap_;
  typedCopy.mLock_PlacesDAOFactory = mLock_PlacesDAOFactory_;
}

@end
